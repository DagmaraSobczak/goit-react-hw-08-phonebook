{"version":3,"file":"static/js/717.0926d07f.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/selectors.js","pages/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactForm_wrapper__-Umw-\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import React, { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\n\nimport { addContact } from '../../redux/operations';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    if (event.target.name === 'name') {\n      setName(event.target.value);\n    } else if (event.target.name === 'number') {\n      setNumber(event.target.value);\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  return (\n    <form className={css.wrapper} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor=\"nameInput\">\n        Name\n      </label>\n      <input\n        className={css.input}\n        type=\"text\"\n        id=\"nameInput\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label className={css.label} htmlFor=\"numberInput\">\n        Number\n      </label>\n      <input\n        className={css.input}\n        type=\"tel\"\n        id=\"numberInput\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"items\":\"ContactsList_items__TY5P-\",\"content\":\"ContactsList_content__TWrsj\",\"btn\":\"ContactsList_btn__GccuV\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactsList.module.css';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from '../../redux/operations';\n\nconst ContactsList = ({ contacts }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul className={css.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={css.items} key={id}>\n          <p className={css.content}>\n            {name}: {number}\n          </p>\n          <button\n            className={css.btn}\n            type=\"button\"\n            onClick={() => handleDelete(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Filter_wrapper__9Ksqy\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filtersSlice';\n\nimport css from './Filter.module.css';\n\nconst Filter = ({ filteredContacts }) => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(state => state.filter);\n\n  const handleFilterChange = event => {\n    const filterValue = event.target.value;\n    dispatch(setFilter(filterValue));\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <label className={css.label}>Search contact</label>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filteredContacts: PropTypes.func,\n};\n\nexport default Filter;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const isLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from '../redux/filtersSlice';\nimport { getContacts, addContact, deleteContact } from '../redux/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport { isLoading, getError } from '../redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const error = useSelector(getError);\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const handleFormSubmit = (name, number) => {\n    let existContact = contacts.find(\n      contact => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (existContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    dispatch(addContact(newContact));\n  };\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name?.toLowerCase().includes(filter?.toLowerCase() || '')\n  );\n\n  return (\n    <>\n      <ContactForm onFormSubmit={handleFormSubmit} />\n      <Filter handleFilterChange={handleFilterChange} />\n      {loading && !error && <b>Request in progress...</b>}\n      <h2>Contacts</h2>\n\n      <ContactsList contacts={filteredContacts} onDelete={handleDelete} />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","event","target","value","className","css","onSubmit","preventDefault","addContact","htmlFor","type","onChange","pattern","title","required","contacts","map","onClick","deleteContact","handleDelete","filteredContacts","filter","useSelector","state","filterValue","setFilter","isLoading","getError","error","loading","items","useEffect","getContacts","contact","toLowerCase","includes","onFormSubmit","find","alert","newContact","handleFilterChange","onDelete"],"sourceRoot":""}